openapi: "3.0.1"
info:
  description: "A REST API designed to fulfil the requirements of the DC2410 coursework."
  version: "1.0"
  title: "DC2410 Coursework"
servers:
  - url: "http://192.168.150.132:3000/api"
    description: "A locally hosted server."
paths:
  /events:
    get:
      operationId: "getEvents"
      summary: "Fetch all events."
      description: "A user must be authenticated and have the role of student or organiser to sort or filter results."
      parameters:
        - name: "sort"
          in: query
          required: false
          description: "Sort the results."
          schema:
            type: string
            enum: ["popularity", "date"]
        - name: "filter"
          in: query
          required: false
          description: "Filter the results."
          schema:
            type: array
            items:
              type: string
              enum: ["me", "sport", "culture", "others"]
        - name: "limit"
          in: query
          required: false
          description: "Only show the first x results."
          schema:
            type: integer
      responses:
        200:
          description: "A list of all the requested events."
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Event"
        500:
          description: "An internal error occurred."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
      security:
        - cookieAuth: []
    post:
      operationId: "createEvent"
      summary: "Create a new event."
      description: "A user must be authenticated to use this method, and have the role of organiser."
      requestBody:
        description: "The event to create."
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                category:
                  type: string
                  enum: ["sport", "culture", "others"]
                date:
                  type: string
                  format: date
                picture:
                  type: string
                  format: binary
                organiser:
                  type: string
                venue:
                  type: string
              required:
                - name
                - category
                - date
                - organiser
                - venue
      responses:
        200:
          $ref: "#/components/responses/SingleEvent"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
      security:
        - cookieAuth: []
  /event/{id}:
    get:
      operationId: "getEvent"
      summary: "Get a specific event by ID."
      description: "A user must be authenticated to use this method, and have the role of student or organiser."
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Event/properties/id'
      responses:
        200:
          $ref: "#/components/responses/SingleEvent"
        404:
          $ref: "#/components/responses/Empty"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
      security:
        - cookieAuth: []
    delete:
      operationId: "deleteEvent"
      summary: "Delete an event by ID."
      description: "A user must be authenticated to use this method, and have the role of organiser."
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Event/properties/id'
      responses:
        200:
          $ref: "#/components/responses/Empty"
        404:
          $ref: "#/components/responses/Empty"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
      security:
        - cookieAuth: []
  /event/{id}/picture:
    get:
      operationId: "getPicture"
      summary: "Get a picture for a specific event."
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Event/properties/id'
      responses:
        200:
          description: "The picture for the event."
          content:
            image/*:
              schema:
                type: string
                format: binary
        404:
          $ref: "#/components/responses/Empty"
  /login:
    post:
      operationId: "login"
      summary: "Login."
      description: "Login with the provided credentials. A JWT cookie is provided on a successful login."
      requestBody:
        description: "The login credentials."
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        200:
          $ref: "#/components/responses/Authenticated"
  /logout:
    get:
      operationId: "logout"
      summary: "Logout."
      description: "Logout, clearing the authentication cookie."
      responses:
        200:
          $ref: "#/components/responses/Empty"
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: dc2410
  responses:
    Authenticated:
      description: "Successful login."
      headers:
        Set-Cookie:
          schema:
            type: string
            example: dc2410=eyJhbGciOifIUzI1NiJ9.NWI1OWJhYsNlOTdlNDr4NTMwY2YyNbQ2.m8GsZzXPXeYYnJuM0Xe7BO66H4FrCiIANuSSACLbjOU; Path=/; HttpOnly
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              token:
                type: string
              role:
                type: string
    Empty:
      description: "An empty response."
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                type: object
    SingleEvent:
      description: "The requested event."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Event"
    Unauthenticated:
      description: "The user wasn't logged in."
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    Unauthorized:
      description: "The user has the wrong permissions."
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
  schemas:
    Event:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          type: string
          enum: ["sport", "culture", "others"]
        date:
          type: string
          format: date
        picture:
          type: boolean
        organiser:
          type: string
        venue:
          type: string